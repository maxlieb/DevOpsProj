# .github/workflows/ci.yml
name: CI Pipeline

on:
  push:
    branches:
      - main

permissions:
  contents: read
  id-token: write  # required for GitHub OIDC -> AWS

env:
  IMAGE_NAME: maxlieb/dadjokes-api
  AWS_REGION: il-central-1
  TF_WORKDIR: Terraform
  AWS_ROLE_TO_ASSUME: arn:aws:iam::863518423554:role/GHA-Terraform-EKS

jobs:
  build-test-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Generate tags and labels (latest + short SHA + branch)
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=sha,format=short
            type=ref,event=branch
          labels: |
            org.opencontainers.image.title=dadjokes-api
            org.opencontainers.image.source=${{ github.repository }}

      # Build once and load into the local Docker daemon to run tests
      - name: Build (load for tests)
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: ${{ env.IMAGE_NAME }}:ci
          cache-from: type=gha
          cache-to: type=gha,mode=max
          labels: ${{ steps.meta.outputs.labels }}

      - name: Run container (for health check)
        run: |
          SUFFIX=$(openssl rand -hex 4)
          echo "NTFY_TOPIC=dadjokes-api-ci-test-${SUFFIX}" >> $GITHUB_ENV
          docker run -d --rm \
            -p 5000:5000 \
            --name dadjokes-container \
            -e NTFY_TOPIC="dadjokes-api-ci-test-${SUFFIX}" \
            ${{ env.IMAGE_NAME }}:ci

      - name: Install jq (for JSON parsing)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Smoke test /health
        run: |
          curl -fsS http://localhost:5000/health | jq -e '.ok == true'
          curl -fsS http://localhost:5000/health | jq -e --arg t "$NTFY_TOPIC" '.topic == $t'

      - name: Add custom joke (POST /jokes)
        id: add
        run: |
          NEW=$(curl -fsS -X POST -H "Content-Type: application/json" \
            -d '{"title":"CI says hi","body":"This is only a test"}' \
            http://localhost:5000/jokes)
          echo "$NEW" | jq .
          ID=$(echo "$NEW" | jq -r '.id')
          test "$ID" != "null" -a -n "$ID"
          echo "id=$ID" >> $GITHUB_OUTPUT

      - name: List jokes (GET /jokes) and assert our ID is present (with retry)
        run: |
          set -euo pipefail
          ATTEMPTS=12
          SLEEP=2
          for i in $(seq 1 $ATTEMPTS); do
            echo "Attempt $i/$ATTEMPTS…"
            if curl -fsS "http://localhost:5000/jokes" \
              | jq -e --arg id "${{ steps.add.outputs.id }}" 'map(.id) | index($id) != null'
            then
              echo "ID found in /jokes"
              exit 0
            fi
            sleep "$SLEEP"
          done
          echo "ID not found after retries. Dumping diagnostics…"
          echo "--- /jokes response ---"
          curl -fsS "http://localhost:5000/jokes" || true
          echo "--- container logs ---"
          docker logs dadjokes-container || true
          exit 1

      - name: Get by id (GET /jokes/<id>)
        run: |
          curl -fsS "http://localhost:5000/jokes/${{ steps.add.outputs.id }}" \
            | jq -e --arg id "${{ steps.add.outputs.id }}" '.id == $id'

      - name: Update joke (PUT /jokes/<id>)
        run: |
          UPD=$(curl -fsS -X PUT -H "Content-Type: application/json" \
            -d '{"title":"CI updated","body":"Updated body"}' \
            "http://localhost:5000/jokes/${{ steps.add.outputs.id }}")
          echo "$UPD" | jq -e '.title == "CI updated" and .body == "Updated body"'

      - name: Delete joke (DELETE /jokes/<id>) and verify gone (with retry)
        run: |
          set -euo pipefail
          ID="${{ steps.add.outputs.id }}"
          echo "Deleting $ID…"
          curl -fsS -X DELETE "http://localhost:5000/jokes/${ID}" \
            | jq -e --arg id "$ID" '.status == "deleted" and .id == $id'
          ATTEMPTS=12
          SLEEP=2
          for i in $(seq 1 $ATTEMPTS); do
            code=$(curl -s -o /dev/null -w '%{http_code}' "http://localhost:5000/jokes/${ID}")
            if [ "$code" = "404" ]; then
              echo "Confirmed: GET /jokes/$ID -> 404"
              exit 0
            fi
            echo "Still visible (HTTP $code). Retrying... ($i/$ATTEMPTS)"
            sleep "$SLEEP"
          done
          echo "Failed to observe 404 after delete. Dumping diagnostics…"
          echo "--- /jokes ---"
          curl -fsS "http://localhost:5000/jokes" || true
          echo "--- container logs ---"
          docker logs dadjokes-container || true
          exit 1

      - name: Reset DB (POST /reset)
        run: |
          curl -fsS -X POST http://localhost:5000/reset | jq -e '.status == "reset"'

      - name: OPTIONAL - fetch Reddit and store (GET /)
        continue-on-error: true
        run: |
          curl -fsS http://localhost:5000/ | jq .

      - name: Stop container
        if: always()
        run: docker stop dadjokes-container || true

      # Docker Hub login (requires secrets)
      - name: Docker Hub login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Build again and push with proper tags/labels
      - name: Build & Push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Show published tags
        run: echo "${{ steps.meta.outputs.tags }}"

  terraform-eks:
    name: Terraform (EKS infra)
    runs-on: ubuntu-latest
    needs: build-test-and-push
    defaults:
      run:
        working-directory: ${{ env.TF_WORKDIR }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: gha-terraform-dadjokes

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.7

      - name: Terraform init
        run: terraform init -input=false -reconfigure

      - name: Terraform validate
        run: terraform validate

      - name: Terraform plan (output to log)
        run: terraform plan -input=false -var-file="terraform.tfvars" -no-color

      - name: Terraform apply
        run: terraform apply -input=false -auto-approve -var-file="terraform.tfvars"

  deploy:
    name: Deploy to EKS
    runs-on: ubuntu-latest
    needs: terraform-eks
    env:
      AWS_REGION: il-central-1
      AWS_ROLE_TO_ASSUME: arn:aws:iam::863518423554:role/GHA-Terraform-EKS
      CLUSTER_NAME: dadjokes-eks
      K8S_DIR: k8s
      DEPLOYMENT_NAME: dadjokes-deployment
      CONTAINER_NAME: dadjokes
      IMAGE_REPO: maxlieb/dadjokes-api

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: gha-deploy

      - name: Install kubectl
        uses: azure/setup-kubectl@v4

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --region $AWS_REGION --name $CLUSTER_NAME

      - name: Apply Service
        run: kubectl apply -f $K8S_DIR/flask-service.yaml

      - name: Apply Deployment manifest (ensure exists)
        run: kubectl apply -f $K8S_DIR/dadjokes-deployment.yaml

      - name: Set image to current SHA
        run: |
          kubectl set image deploy/$DEPLOYMENT_NAME \
            $CONTAINER_NAME=$IMAGE_REPO:${{ github.sha }} --record

      - name: Wait for rollout
        run: kubectl rollout status deploy/$DEPLOYMENT_NAME --timeout=300s

      - name: Show Service external hostname
        run: |
          echo -n "LB DNS: "
          kubectl get svc dadjokes-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'; echo
